# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from level_three/cmd_msg.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class cmd_msg(genpy.Message):
<<<<<<< HEAD
  _md5sum = "566d17a628bc076339216b5cb43fb1ee"
  _type = "level_three/cmd_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Twist cmd_msg
int32 target

=======
  _md5sum = "71f25e80beb7e45806f82da575102343"
  _type = "level_three/cmd_msg"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Twist cmd_msg
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
<<<<<<< HEAD
  __slots__ = ['cmd_msg','target']
  _slot_types = ['geometry_msgs/Twist','int32']
=======
  __slots__ = ['cmd_msg']
  _slot_types = ['geometry_msgs/Twist']
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
<<<<<<< HEAD
       cmd_msg,target
=======
       cmd_msg
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cmd_msg, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.cmd_msg is None:
        self.cmd_msg = geometry_msgs.msg.Twist()
<<<<<<< HEAD
      if self.target is None:
        self.target = 0
    else:
      self.cmd_msg = geometry_msgs.msg.Twist()
      self.target = 0
=======
    else:
      self.cmd_msg = geometry_msgs.msg.Twist()
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
<<<<<<< HEAD
      buff.write(_struct_6di.pack(_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z, _x.target))
=======
      buff.write(_struct_6d.pack(_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z))
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.cmd_msg is None:
        self.cmd_msg = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
<<<<<<< HEAD
      end += 52
      (_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z, _x.target,) = _struct_6di.unpack(str[start:end])
=======
      end += 48
      (_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z,) = _struct_6d.unpack(str[start:end])
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
<<<<<<< HEAD
      buff.write(_struct_6di.pack(_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z, _x.target))
=======
      buff.write(_struct_6d.pack(_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z))
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.cmd_msg is None:
        self.cmd_msg = geometry_msgs.msg.Twist()
      end = 0
      _x = self
      start = end
<<<<<<< HEAD
      end += 52
      (_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z, _x.target,) = _struct_6di.unpack(str[start:end])
=======
      end += 48
      (_x.cmd_msg.linear.x, _x.cmd_msg.linear.y, _x.cmd_msg.linear.z, _x.cmd_msg.angular.x, _x.cmd_msg.angular.y, _x.cmd_msg.angular.z,) = _struct_6d.unpack(str[start:end])
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
<<<<<<< HEAD
_struct_6di = struct.Struct("<6di")
=======
_struct_6d = struct.Struct("<6d")
>>>>>>> 0a4397d857b6d8748b148ea9dda2c77306ec837e
