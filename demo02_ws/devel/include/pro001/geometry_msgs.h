// Generated by gencpp from file pro001/geometry_msgs.msg
// DO NOT EDIT!


#ifndef PRO001_MESSAGE_GEOMETRY_MSGS_H
#define PRO001_MESSAGE_GEOMETRY_MSGS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pro001
{
template <class ContainerAllocator>
struct geometry_msgs_
{
  typedef geometry_msgs_<ContainerAllocator> Type;

  geometry_msgs_()
    : speed(0.0)  {
    }
  geometry_msgs_(const ContainerAllocator& _alloc)
    : speed(0.0)  {
  (void)_alloc;
    }



   typedef double _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::pro001::geometry_msgs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pro001::geometry_msgs_<ContainerAllocator> const> ConstPtr;

}; // struct geometry_msgs_

typedef ::pro001::geometry_msgs_<std::allocator<void> > geometry_msgs;

typedef boost::shared_ptr< ::pro001::geometry_msgs > geometry_msgsPtr;
typedef boost::shared_ptr< ::pro001::geometry_msgs const> geometry_msgsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pro001::geometry_msgs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pro001::geometry_msgs_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pro001::geometry_msgs_<ContainerAllocator1> & lhs, const ::pro001::geometry_msgs_<ContainerAllocator2> & rhs)
{
  return lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pro001::geometry_msgs_<ContainerAllocator1> & lhs, const ::pro001::geometry_msgs_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pro001

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pro001::geometry_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pro001::geometry_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pro001::geometry_msgs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pro001::geometry_msgs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pro001::geometry_msgs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pro001::geometry_msgs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pro001::geometry_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4641bb0523a3557209606d9bd91ce33a";
  }

  static const char* value(const ::pro001::geometry_msgs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4641bb0523a35572ULL;
  static const uint64_t static_value2 = 0x09606d9bd91ce33aULL;
};

template<class ContainerAllocator>
struct DataType< ::pro001::geometry_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pro001/geometry_msgs";
  }

  static const char* value(const ::pro001::geometry_msgs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pro001::geometry_msgs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 speed\n"
"\n"
;
  }

  static const char* value(const ::pro001::geometry_msgs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pro001::geometry_msgs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct geometry_msgs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pro001::geometry_msgs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pro001::geometry_msgs_<ContainerAllocator>& v)
  {
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PRO001_MESSAGE_GEOMETRY_MSGS_H
