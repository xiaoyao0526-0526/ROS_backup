#include <ros/ros.h>
#include "std_msgs/String.h"
#include "geometry_msgs/Twist.h"
#include "level_three/cmd_msg.h"
#include "level_three/Location_monitor.h"
#include <sstream>

geometry_msgs::Twist msg1;
level_three::cmd_msg cmd_msg;
ros::Publisher move_pub;
bool new_cmd_msg = false;
int target = 0;
float distance;

void target_callback(const level_three::cmd_msg& msg) {
  cmd_msg = msg;
  new_cmd_msg = true;
}

void move_turtle_to_target(int target) {
  switch(target) {
    case 1:
      msg1.linear.x = 0.8;
      msg1.angular.z = 0.0;
      break;
    case 2:
      msg1.linear.x = 0.0;
      msg1.angular.z = 0.40;
      break;
    // add more cases for additional targets as needed
    default:
      ROS_ERROR_STREAM("Invalid target: " << target);
      return;
  }
  move_pub.publish(msg1);
  ROS_INFO_STREAM("Sending velocity command:"
    << " linear=" << msg1.linear.x
    << " angular=" << msg1.angular.z);
}

int main(int argc, char **argv)
{

  // Set up ROS.
  ros::init(argc, argv, "level_three_loc_mon");
  ros::NodeHandle n;

  // Create publisher to control turtle movement.
  move_pub = n.advertise<geometry_msgs::Twist>("/turtle1/cmd_vel", 1000);

  // Create subscriber to receive target messages.
  ros::Subscriber target_sub = n.subscribe("target", 1000, target_callback);

  ros::Rate loop_rate(20);
  int count = 0;
  while(ros::ok())
  {
    // 等待 loc_mon 节点发布 target_msg 消息
    while (!new_cmd_msg) {
      ROS_INFO("Waiting for target message...");
      ros::Duration(1.0).sleep();
      ros::spinOnce();
    }

    // 清除 new_target_msg 标志
    new_cmd_msg = false;

    if (target != target) {
      //target = cmd_msg.target;
	target = target;
      move_turtle_to_target(target);
    }

    ros::spinOnce();
    loop_rate.sleep();
  }

  return 0;
}

